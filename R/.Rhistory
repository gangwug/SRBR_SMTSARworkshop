plot(x=NULL,y=NULL,xlim=c(0,4.5),ylim=c(0,0.85),xlab="",ylab="",main="bhtc_ArrayBase")
for (k in 1:ncol(baseM))
{
par(new=T)
plot(density(log10(baseM[,k])),xlim=c(0,4.5),ylim=c(0,0.85),type="l", col=basecol[k], xlab="",ylab="",main="")
}
mtext("Log10(Intensity)",side=1,line=1.2)
abline(v=2.3,lty=3)
text(2.6,0.025,labels="2.3",cex=0.65)
legend("topright", legend=tags, col=basecol, lty=1, bty="n", cex=0.3)
dev.off()
pdf("~/Work/UC/DATA/COPT/Tep/NFAT/bhtcArrayBaseDensity.pdf",width=3,height=3,pointsize=12)
par(mai=c(0.5,0.4,0.3,0.1),mgp=c(1.5,0.25,0),tck=-0.01)
basecol <- colorRampPalette(c("blue", "red"))( length(tags) )
plot(x=NULL,y=NULL,xlim=c(0,4.5),ylim=c(0,1.05),xlab="",ylab="",main="bhtc_ArrayBase")
for (k in 1:ncol(baseM))
{
par(new=T)
plot(density(log10(baseM[,k])),xlim=c(0,4.5),ylim=c(0,1.05),type="l", col=basecol[k], xlab="",ylab="",main="")
}
mtext("Log10(Intensity)",side=1,line=1.2)
abline(v=2,lty=3)
text(2.3,0.025,labels="2",cex=0.65)
legend("topright", legend=tags, col=basecol, lty=1, bty="n", cex=0.3)
dev.off()
annoD <- read.delim("~/Work/UC/DATA/PCOR/application/meta2d/datasets/MoGene-1_0-st-v1/MoGene-1_0-st-v1.na35.mm10.transcript.AnnoInf.txt/")
annoD <- read.delim("~/Work/UC/DATA/PCOR/application/meta2d/datasets/MoGene-1_0-st-v1/MoGene-1_0-st-v1.na35.mm10.transcript.AnnoInf.txt")
dim(annoD)
head(annoD)
annoD <- filter(annoD, annotatedGeneNum=1)
annoD <- read.delim("~/Work/UC/DATA/PCOR/application/meta2d/datasets/MoGene-1_0-st-v1/MoGene-1_0-st-v1.na35.mm10.transcript.AnnoInf.txt")
annoD <- filter(annoD, annotatedGeneNum==1)
dim(annoD)
head(annoD)
tail(annoD)
i=1
tepD <- read.delim(paste(indir, infiles[i], sep=""))
head(tepD)
dim(annoD)
tepD <- read.delim(paste(indir, infiles[i], sep=""))
#expression above cut-off
tepD <- filter(tepD, meta2d_Base > basecut)
#with unique annotation
outD <- inner_join(tepD, annoD, by=c("CycID" = "transcriptID"))
basecut <- 100
tepD <- read.delim(paste(indir, infiles[i], sep=""))
#expression above cut-off
tepD <- filter(tepD, meta2d_Base > basecut)
#with unique annotation
outD <- inner_join(tepD, annoD, by=c("CycID" = "transcriptID"))
head(outD)
dim(outD)
?inner_join
tepD <- read.delim(paste(indir, infiles[i], sep=""))
#expression above cut-off
expD <- filter(tepD, meta2d_Base > basecut)
#with unique annotation
outD <- inner_join(expD, annoD, by=c("CycID" = "transcriptID"))
remainD <- anti_join(tepD, outD, by="CycID")
head(outD)
dim(outD)
dim(remainD)
dim(tepD)
12398+23158
?p.adjust
infiles[i]
?write.table
i
tepD <- read.delim(paste(indir, infiles[i], sep=""))
#expression above cut-off
expD <- filter(tepD, meta2d_Base > basecut)
#with unique annotation
outD <- inner_join(expD, annoD, by=c("CycID" = "transcriptID"))
#recalculate FDR
newfdr <- p.adjust(outD$JTK_pvalue, method="BH")
outD$JTK_BH.Q <- newfdr
#those remaining transcripts
remainD <- anti_join(tepD, outD, by="CycID")
#output selected transcripts and remaining transcripts
outname <- infiles[i]
outname <- gsub(".txt", "", outname, fixed = TRUE)
outname
write.table(outD, file= paste(indir, "/", outname, ".ExpAnno.txt", sep=""), quote = FALSE, sep = "\t", row.names = FALSE)
write.table(remainD, file=paste(indir, "/", outname, ".ExpAnno_Remaining.txt", sep=""), quote = FALSE, sep = "\t", row.names = FALSE)
dim(outD)
dim(remainD)
dim(tepD)
annoD <- read.delim("~/Work/UC/DATA/PCOR/application/meta2d/datasets/MoGene-1_0-st-v1/MoGene-1_0-st-v1.na35.mm10.transcript.AnnoInf.txt")
annoD <- filter(annoD, annotatedGeneNum==1)
basecut <- 100
for (i in 1:length(infiles))
{
tepD <- read.delim(paste(indir, infiles[i], sep=""))
#expression above cut-off
expD <- filter(tepD, meta2d_Base > basecut)
#with unique annotation
outD <- inner_join(expD, annoD, by=c("CycID" = "transcriptID"))
#recalculate FDR
newfdr <- p.adjust(outD$JTK_pvalue, method="BH")
outD$JTK_BH.Q <- newfdr
#those remaining transcripts
remainD <- anti_join(tepD, outD, by="CycID")
#output selected transcripts and remaining transcripts
outname <- infiles[i]
outname <- gsub(".txt", "", outname, fixed = TRUE)
write.table(outD, file= paste(indir, "/", outname, ".ExpAnno.txt", sep=""), quote = FALSE, sep = "\t", row.names = FALSE)
write.table(remainD, file=paste(indir, "/", outname, ".ExpAnno_Remaining.txt", sep=""), quote = FALSE, sep = "\t", row.names = FALSE)
}
indir
i
dim(outD)
dim(remainD)
12513+23043
dim(tepD)
rm(list=ls())
q()
?write.csv
install.packages("shiny")
library(shiny)
runGitHub("MetaCycleApp", "gangwug")
setwd("~/Desktop/MetaCycleApp-master/")
runApp()
runApp()
runApp()
runGitHub("MetaCycleApp", "gangwug")
runGitHub("MetaCycleApp", "gangwug")
setwd("/Users/wug2/Work/UC/Tools/SharedFiles/gitdata/SRBR_SMTSAworkshop")
getwd()
setwd("./R")
getwd()
library(dplyr)
?filter
head(mtcars)
mtcars %>% filter(cyl >4) %>% select(mpg, cyl, hp)
tepD <- mtcars %>% filter(cyl >4) %>% select(mpg, cyl, hp)
tepD
?melt
library(reshape2)
?melt
?arrange
?ggsave
library(cowplot)
?ggsave
tepD <- read.csv("~/Work/UC/DATA/COPT/Huntington/process/test/meta2d_test_STRR_StarPort.MinSenseNorm.csv", stringsAsFactors = FALSE)
head(tepD)
inputD <- tepD %>% select(CycID, meta2d_period, meta2d_phase )
?select
inputD <- tepD %>% select(CycID, meta2d_period, meta2d_phase, contains("_STRR_"))
head(inputD)
minfold=0.8
maxfold=1.25
library(dplyr)
library(reshape2)
library(cowplot)
library(ggplot2)
colnames(inputD)[1:3] <- c("CycID", "Per", "Pha")
inputD <- arrange(inputD, Pha)
inputD <- tepD %>% filter(meta2d_pvalue < 0.05) %>% select(CycID, meta2d_period, meta2d_phase, contains("_STRR_"))
head(inputD)
dim(inputD)
inputD <- tepD %>% filter(meta2d_pvalue < 0.05, meta2d_Base > 2) %>% select(CycID, meta2d_period, meta2d_phase, contains("_STRR_"))
dim(inputD)
library(dplyr)
library(reshape2)
library(cowplot)
library(ggplot2)
## arrange the input data by phase information
colnames(inputD)[1:3] <- c("CycID", "Per", "Pha")
inputD <- arrange(inputD, Pha)
## median normalization of the expression profiles
figM <- as.matrix(inputD[, -(1:3)])
fig_median <- apply(figM, 1, median)
figM <- figM / fig_median
figM[figM < minfold] <- minfold
figM[figM > maxfold] <- maxfold
figD <- as.data.frame(figM)
head(figD)
id_order <- as.character(inputD$CycID)
id_factor <- as.factor(length(id_order):1)
figD <- mutate(figD, id_factor = id_factor)
cnum <- ncol(figD)
figD <- figD[,c(cnum, 1:(cnum - 1))]
figD.m <- melt(figD)
head(figD.m)
p <- ggplot(figD.m, aes(variable, id_factor)) + geom_tile(aes(fill = value)) +
scale_fill_gradient2(name="Exp/Med", low = "blue", mid="grey20", high = "yellow", midpoint=1, space="Lab")
heat.plot <- p + scale_x_discrete(expand = c(0, 0)) + scale_y_discrete(expand = c(0, 0)) +
theme(axis.line=element_blank(), axis.ticks = element_blank(), axis.text = element_blank() )
heat.out <- ggdraw() + draw_plot(heat.plot)
heat.out
?labs
heatmapF <- function(inputD, minfold=0.8, maxfold=1.25) {
## loading the required library
library(dplyr)
library(reshape2)
library(cowplot)
library(ggplot2)
## arrange the input data by phase information
colnames(inputD) <- c("CycID", "Per", "Pha", paste("sample", 1:(ncol(inputD) -3), sep=""))
inputD <- arrange(inputD, Pha)
## median normalization of the expression profiles
figM <- as.matrix(inputD[, -(1:3)])
fig_median <- apply(figM, 1, median)
figM <- figM / fig_median
figM[figM < minfold] <- minfold
figM[figM > maxfold] <- maxfold
figD <- as.data.frame(figM)
## prepare the data frame for heatmap
id_order <- as.character(inputD$CycID)
id_factor <- as.factor(length(id_order):1)
figD <- mutate(figD, id_factor = id_factor)
cnum <- ncol(figD)
figD <- figD[,c(cnum, 1:(cnum - 1))]
figD.m <- melt(figD)
## draw the heatmap
p <- ggplot(figD.m, aes(variable, id_factor)) + geom_tile(aes(fill = value)) +
scale_fill_gradient2(name="Exp/Med", low = "blue", mid="grey20", high = "yellow", midpoint=1, space="Lab")
heat.plot <- p + labs(title="", x="", y="") + scale_x_discrete(expand = c(0, 0)) + scale_y_discrete(expand = c(0, 0)) +
theme(axis.line=element_blank(), axis.ticks = element_blank(), axis.text = element_blank() )
heat.out <- ggdraw() + draw_plot(heat.plot)
return(heat.out)
}
head(inputD)
heatmapFig <- heatmapF(inputD)
heatmapFig
class(heatmapFig)
require(grDevices)
stars(mtcars[, 1:7], key.loc = c(14, 2),
main = "Motor Trend Cars : stars(*, full = F)", full = FALSE)
stars(mtcars[, 1:7], key.loc = c(14, 1.5),
main = "Motor Trend Cars : full stars()", flip.labels = FALSE)
stars(mtcars[, 1:7], locations = c(0, 0), radius = FALSE,
key.loc = c(0, 0), main = "Motor Trend Cars", lty = 2)
palette(rainbow(12, s = 0.6, v = 0.75))
stars(mtcars[, 1:7], len = 0.8, key.loc = c(12, 1.5),
main = "Motor Trend Cars", draw.segments = TRUE)
stars(mtcars[, 1:7], len = 0.6, key.loc = c(1.5, 0),
main = "Motor Trend Cars", draw.segments = TRUE,
frame.plot = TRUE, nrow = 4, cex = .7)
USJudge <- apply(USJudgeRatings, 2, function(x) x/max(x))
Jnam <- row.names(USJudgeRatings)
Snam <- abbreviate(substring(Jnam, 1, regexpr("[,.]",Jnam) - 1), 7)
stars(USJudge, labels = Jnam, scale = FALSE,
key.loc = c(13, 1.5), main = "Judge not ...", len = 0.8)
stars(USJudge, labels = Snam, scale = FALSE,
key.loc = c(13, 1.5), radius = FALSE)
oc <- stars(USJudge, labels = NULL, scale = FALSE,
radius = FALSE, frame.plot = TRUE,
key.loc = c(13, 1.5), main = "Judge not ...", len = 1.2)
text(loc, Snam, col = "blue", cex = 0.8, xpd = TRUE)
stars(USJudge, draw.segments = TRUE, scale = FALSE, key.loc = c(13,1.5))
stars(USJudgeRatings, locations = c(0, 0), scale = FALSE, radius  =  FALSE,
col.stars = 1:10, key.loc = c(0, 0), main = "US Judges rated")
stars(USJudgeRatings, locations = c(0, 0), scale = FALSE, radius  =  FALSE,
col.lines = 1:10, key.loc = c(0, 0), main = "US Judges rated")
stars(USJudgeRatings[1:10,], locations = 0:1, scale = FALSE,
draw.segments = TRUE, col.segments = 0, col.stars = 1:10, key.loc =  0:1,
main = "US Judges 1-10 ")
palette("default")
stars(cbind(1:16, 10*(16:1)), draw.segments = TRUE,
main = "A Joke -- do *not* use symbols on 2D data!")
install.packages("fmsb")
library("fmsb")
dat <- data.frame(
total=runif(3, 1, 5),
phys=rnorm(3, 10, 2),
psycho=c(0.5, NA, 3),
social=runif(3, 1, 5),
env=c(5, 2.5, 4))
dat <- rbind(maxmin,dat)
op <- par(mar=c(1, 2, 2, 1),mfrow=c(2, 2))
radarchart(dat, axistype=1, seg=5, plty=1, vlabels=c("Total\nQOL", "Physical\naspects",
"Phychological\naspects", "Social\naspects", "Environmental\naspects"),
title="(axis=1, 5 segments, with specified vlabels)", vlcex=0.5)
radarchart(dat, axistype=2, pcol=topo.colors(3), plty=1, pdensity=c(5, 10, 30),
pangle=c(10, 45, 120), pfcol=topo.colors(3),
title="(topo.colors, fill, axis=2)")
radarchart(dat, axistype=3, pty=32, plty=1, axislabcol="grey", na.itp=FALSE,
title="(no points, axis=3, na.itp=FALSE)")
radarchart(dat, axistype=1, plwd=1:5, pcol=1, centerzero=TRUE,
seg=4, caxislabels=c("worst", "", "", "", "best"),
title="(use lty and lwd but b/w, axis=1,\n centerzero=TRUE, with centerlabels)")
pider(y=1,x=2:9,data=Thurstone,connect=FALSE) #a radar plot
op <- par(mfrow=c(3,2))
spider(y=1,x=2:9,data=Thurstone,connect=FALSE) #a radar plot
install.packages("psych")
library("psych")
library("psych")
op <- par(mfrow=c(3,2))
spider(y=1,x=2:9,data=Thurstone,connect=FALSE) #a radar plot
spider(y=1,x=2:9,data=Thurstone) #same plot as a spider plot
spider(y=1:3,x=4:9,data=Thurstone,overlay=TRUE)
spider(y=26:28,x=1:25,data=cor(bfi,use="pairwise"),fill=TRUE,scale=2)
Thurstone
spider
?radarchart
total=c(5, 1),
phys=c(15, 3),
psycho=c(3, 0),
social=c(5, 1),
env=c(5, 1))
# data for radarchart function version 1 series, minimum value must be omitted from above.
RNGkind("Mersenne-Twister")
set.seed(123)
dat <- data.frame(
total=runif(3, 1, 5),
phys=rnorm(3, 10, 2),
psycho=c(0.5, NA, 3),
social=runif(3, 1, 5),
env=c(5, 2.5, 4))
dat <- rbind(maxmin,dat)
op <- par(mar=c(1, 2, 2, 1),mfrow=c(2, 2))
radarchart(dat, axistype=1, seg=5, plty=1, vlabels=c("Total\nQOL", "Physical\naspects",
"Phychological\naspects", "Social\naspects", "Environmental\naspects"),
title="(axis=1, 5 segments, with specified vlabels)", vlcex=0.5)
install.packages(plotly)
install.packages("plotly")
?plot_ly
library("plotly")
?plot_ly
economics
p <- plot_ly(economics, x = date, y = uempmed, type = "scatter",
showlegend = FALSE)
p
data(economics, package = "ggplot2")
# basic time-series plot
p <- plot_ly(economics, x = date, y = uempmed, type = "scatter",
showlegend = FALSE)
# add a loess smoother
p2 <- add_trace(p, y = fitted(loess(uempmed ~ as.numeric(date))))
# add a title
p3 <- layout(p2, title = "Median duration of unemployment (in weeks)")
# change the font
layout(p3, font = list(family = "Courier New, monospace"))
plot_ly(economics, x = date, y = unemploy / pop, color = pop, mode = "markers")
plot_ly(economics, x = date, y = unemploy / pop, color = pop,
colors = terrain.colors(5), mode = "markers")
# function to extract the decade of a given date
decade <- function(x) {
factor(floor(as.numeric(format(x, "%Y")) / 10) * 10)
}
plot_ly(economics, x = unemploy / pop, color = decade(date), type = "box")
economics %>%
transform(rate = unemploy / pop) %>%
plot_ly(x = date, y = rate) %>%
loess(rate ~ as.numeric(date), data = .) %>%
broom::augment() %>%
add_trace(y = .fitted)
# sometimes, a data frame isn't fit for the use case...
# for 3D surface plots, a numeric matrix is more natural
plot_ly(z = volcano, type = "surface")
p <- plot_ly(plotly::wind, r = r, t = t, color = nms, type = "area")
layout(p, radialaxis = list(ticksuffix = "%"), orientation = 270)
plotly::wind
?plot_ly
install.packages("circular")
?circular
library("circular")
library("circular")
?rose.diag
x <- circular(runif(50, 0, 2*pi))
rose.diag(x, bins = 18, main = 'Uniform Data')
x <- circular(runif(50, 0, 2*pi))
rose.diag(x, bins = 18, main = 'Uniform Data')
points(x)
x
?points
?points.circular
data.vm <- rvonmises(n=100, mu=circular(0), kappa=3)
# Plot data set. All points do not fit on plot.
plot(data.vm, stack=TRUE, bins=150)
plot(data.vm, stack=TRUE, bins=150)
plot(data.vm, stack=TRUE, bins=150, xlim=c(-1,1.2), ylim=c(-1,0))
?rose.diag
x <- rvonmises(n=50, mu=circular(0), kappa=5, control.circular=list(zero=pi/4))
y <- rose.diag(x, bins=18) # Points fall out of bounds.
y
points(x, plot.info=y, stack=TRUE)
y <- rose.diag(x, bins=18, prop=1.5, shrink=1.5) # Adjust optional parameters to fit
points(x, plot.info=y, stack=TRUE)
plot(x)
rose.diag(x, bins=12, add=TRUE, col=2)
?rose.diag
x <- circular(runif(50, 0, 2*pi))
x
class(x)
runif(50, 0, 2*pi)
rose.diag(x, bins = 18, main = 'Uniform Data')
?rose.diag
?rose.diag
plot(data.vm, stack=TRUE, bins=150)
plot(data.vm, stack=TRUE, bins=150, rotation = "clock")
rose.diag(x, bins = 18, rotation = pi/2)
rose.diag(x, bins = 18, rotation = NULL)
rose.diag(x, bins = 18, rotation = NULL)
?colors
colors()
ggplot(diamonds, aes(carat)) +
geom_histogram()
head(diamonds)
?geom_histogram
head(inputD)
dim(inputD)
colnames(inputD) <- c("CycID", "Per", "Pha", paste("sample", 1:(ncol(inputD) -3), sep=""))
binwidth=2
histcol = "blue"
figD <- select(inputD, CycID, Pha)
head(figD)
p <- ggplot(figD, aes(Pha)) +
geom_histogram(binwidth = binwdith, col=histcol, fill=histcol, show.legend = FALSE)
p <- ggplot(figD, aes(Pha)) +
geom_histogram(binwidth = binwidth, col=histcol, fill=histcol, show.legend = FALSE)
p
phase.plot <- p + labs(title="", x="Phase value", y="Count") + scale_x_discrete(expand = c(0, 0)) + scale_y_discrete(expand = c(0, 0)) +
theme(axis.line=element_blank(), axis.ticks = element_blank(), axis.text = element_blank() )
p
phase.plot
phase.plot <- p + labs(title="", x="Phase value", y="Count")
phase.plot
phase.plot <- p + labs(title="", x="Phase value", y="Count") + scale_x_discrete(expand = c(0, 0))
phase.plot
phase.plot <- p + labs(title="", x="Phase value", y="Count") + scale_x_discrete(expand = c(0, 0)) + scale_y_discrete(expand = c(0, 0))
phase.plot
phase.plot <- p + labs(title="", x="Phase value", y="Count") +
theme(axis.line=element_blank(), axis.ticks = element_blank(), axis.text = element_blank() )
phase.plot
p <- ggplot(figD, aes(Pha)) +
geom_histogram(binwidth = binwidth, col=histcol, fill=histcol, show.legend = FALSE) +
labs(title="", x="Phase value", y="Count")
p
binvalue=seq(0,24,by=2)
colnames(inputD) <- c("CycID", "Per", "Pha", paste("sample", 1:(ncol(inputD) -3), sep=""))
figD <- select(inputD, CycID, Pha)
p <- ggplot(figD, aes(Pha)) +
geom_histogram(breaks = binvalue, col=histcol, fill=histcol, show.legend = FALSE) +
labs(title="", x="Phase value", y="Count")
phase.out <- ggdraw() + draw_plot(phase.plot)
phase.out
p <- ggplot(figD, aes(Pha)) +
geom_histogram(breaks = binvalue, col=histcol, fill=histcol, show.legend = FALSE) +
labs(title="", x="Phase value", y="Count")
p
phase.out <- ggdraw() + draw_plot(p)
phase.out
## set column names for the inputD
colnames(inputD) <- c("CycID", "Per", "Pha", paste("sample", 1:(ncol(inputD) -3), sep=""))
figD <- select(inputD, CycID, Pha)
p <- ggplot(figD, aes(Pha)) +
geom_histogram(breaks = binvalue, fill=histcol, show.legend = FALSE) +
labs(title="", x="Phase value", y="Count")
phase.out <- ggdraw() + draw_plot(p)
colnames(inputD) <- c("CycID", "Per", "Pha", paste("sample", 1:(ncol(inputD) -3), sep=""))
figD <- select(inputD, CycID, Pha)
p <- ggplot(figD, aes(Pha)) +
geom_histogram(breaks = binvalue, col="grey60", fill=histcol, show.legend = FALSE) +
labs(title="", x="Phase value", y="Count")
phase.out <- ggdraw() + draw_plot(p)
phase.out
binvalue=seq(0,24,by=1)
colnames(inputD) <- c("CycID", "Per", "Pha", paste("sample", 1:(ncol(inputD) -3), sep=""))
figD <- select(inputD, CycID, Pha)
p <- ggplot(figD, aes(Pha)) +
geom_histogram(breaks = binvalue, col="grey60", fill=histcol, show.legend = FALSE) +
labs(title="", x="Phase value", y="Count")
phase.out <- ggdraw() + draw_plot(p)
phase.out
## set column names for the inputD
colnames(inputD) <- c("CycID", "Per", "Pha", paste("sample", 1:(ncol(inputD) -3), sep=""))
figD <- select(inputD, CycID, Pha)
p <- ggplot(figD, aes(Pha)) +
geom_histogram(breaks = binvalue, col="grey60", fill=histcol, show.legend = FALSE) +
labs(title="", x="Phase value", y="Count") + scale_x_continuous(breaks = binvalue, labels = binvalue)
p
binvalue=seq(0,24,by=2)
colnames(inputD) <- c("CycID", "Per", "Pha", paste("sample", 1:(ncol(inputD) -3), sep=""))
figD <- select(inputD, CycID, Pha)
p <- ggplot(figD, aes(Pha)) +
geom_histogram(breaks = binvalue, col="grey60", fill=histcol, show.legend = FALSE) +
labs(title="", x="Phase value", y="Count") + scale_x_continuous(breaks = binvalue, labels = binvalue)
phase.out <- ggdraw() + draw_plot(p)
phase.out
binvalue=seq(0,24,by=1)
colnames(inputD) <- c("CycID", "Per", "Pha", paste("sample", 1:(ncol(inputD) -3), sep=""))
figD <- select(inputD, CycID, Pha)
p <- ggplot(figD, aes(Pha)) +
geom_histogram(breaks = binvalue, col="grey60", fill=histcol, show.legend = FALSE) +
labs(title="", x="Phase value", y="Count") + scale_x_continuous(breaks = binvalue, labels = binvalue)
phase.out <- ggdraw() + draw_plot(p)
phase.out
tepv <- inputD$Pha
tepv <- sort(tepv)
tepv
tepv[1:50]
phaseHist <- function(inputD, binvalue=seq(0,24,by=1), histcol = "blue")  {
## set column names for the inputD
colnames(inputD) <- c("CycID", "Per", "Pha", paste("sample", 1:(ncol(inputD) -3), sep=""))
figD <- select(inputD, CycID, Pha)
p <- ggplot(figD, aes(Pha)) +
geom_histogram(breaks = binvalue, col="grey60", fill=histcol, show.legend = FALSE) +
labs(title="", x="Phase value", y="Count") + scale_x_continuous(breaks = binvalue, labels = binvalue)
phase.out <- ggdraw() + draw_plot(p)
return(phase.out)
}
phaseFig <- phaseHist(inputD, histcol = "organge")
phaseFig <- phaseHist(inputD, histcol = "orange")
phaseFig
phaseFig <- phaseHist(inputD, binvalue=seq(0,24,by=4), histcol = "orange")
phaseFig
phaseFig <- phaseHist(inputD, binvalue=seq(0,24,by=1), histcol = "orange")
phaseFig
rm(list=ls())
q()
